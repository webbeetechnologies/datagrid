export type IFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter';

export interface IGraphProps {
    x: number;
    y: number;
}

export interface ILineProps extends IGraphProps {
    points: number[];
    stroke?: string;
    closed?: boolean;
}

export interface IRectProps extends IGraphProps {
    width: number;
    height: number;
    fill?: string;
    stroke?: string;
    radius?: number[] | number;
}

export interface ITextProps extends IGraphProps {
    text: string;
    fillStyle?: string;
    fontSize?: number;
    textAlign?: 'left' | 'right' | 'center' | 'start' | 'end';
    verticalAlign?: 'top' | 'middle' | 'bottom';
    fontWeight?: IFontWeight;
    textDecoration?: 'underline' | 'line-through' | 'none';
    favicon?: string;
}

export interface ILinkData {
    endIndex: number;
    url: string;
}

export interface IWrapTextProps extends ITextProps {
    maxWidth: number;
    lineHeight: number;
    maxRow?: number;
    fieldType: string;
    originValue?: ISegment[] | null;
    isLinkSplit?: boolean;
    needDraw?: boolean;
}

export interface IImageProps extends IGraphProps {
    url: string;
    width: number;
    height: number;
    opacity?: number;
    clipFunc?: (ctx: any) => void;
}

export type ILabelProps = Omit<IRectProps & ITextProps, 'fillStyle'> & {
    background: string;
    color?: string;
    padding?: number;
};

export interface ICtxStyleProps {
    fontSize?: number;
    fontWeight?: IFontWeight;
    fillStyle?: string;
    strokeStyle?: string;
}

export interface ITextEllipsisProps {
    text: string;
    maxWidth?: number;
    fontSize?: number;
    fontWeight?: IFontWeight;
}

export interface IRenderEndBlankProps {
    x: number;
    y: number;
    type: any;
    depth: number;
    groupLength: number;
    height: number;
}

export type IWrapTextDataProps = {
    offsetX: number;
    offsetY: number;
    text: string;
    width: number;
    linkUrl: string | null;
}[];

export interface IWrapTextResultProps {
    height: number;
    data: IWrapTextDataProps;
}

export enum SegmentType {
    Unknown = 0,
    Text = 1, // plain text
    // Mention = 1, // @type
    Url = 2, // link
    Image = 3, // inline image
    // Email = 4, // email, subset of URL
}
export interface IBaseSegment {
    text: string;
}

export interface ITextSegment extends IBaseSegment {
    type: SegmentType.Text;
}
export interface IHyperlinkSegment extends IBaseSegment {
    type: SegmentType.Url;
    link: string; // In the case of pure link, link is the same as text
    title?: string;
    favicon?: string;
    visited?: boolean;
}

export type ISegment = ITextSegment | IHyperlinkSegment;

export type Field<C extends Object = Record<string, any>> = {
    id: string;
    slug: string;
    type: string;
    options: C;
    description: string;
    title: string;
    returnType?: string;
    filters: any[];
    isAutoGenerated: boolean;
    isCalculated: boolean;
    returnField?: Pick<Field, 'filters' | 'returnType' | 'title' | 'options' | 'type'>;
    isPrimary?: boolean;
    isBroken: boolean;
};

export interface IRenderProps {
    x: number;
    y: number;
    columnWidth: any;
    rowHeight: number;
    recordId?: string;
    field: Field;
    cellValue: any;
    isActive?: boolean;
    editable?: boolean;
    // rowHeightLevel: RowHeightLevel;
    style: IRenderStyleProps;
}
export interface IRenderStyleProps {
    color?: string;
    bgColor?: string; // Background color for gantt view
    textAlign?: 'left' | 'right' | 'center' | 'start' | 'end';
    fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter';
}
